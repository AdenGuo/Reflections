What happens when you initialize a repository? Why do you need to do it?
	Git creat a hidden folder in my working directory and ready to track all the file under my working 
	directory. Because this action will turn a normal directory into a git repository. I can use git 
	system in this folder.
How is the staging area different from the working directory and the repository? What value do you 
think it offers?
	Staging area are actually marks of files that indicat files will be committed. It only contain files 
	in current directory. The repository is the directory that be tracked by the git system. I think staging
	area act like a buffer for commit. One can add files or remove file from this area depending on the work 
	flow. Finale commit will be performed on the staging area. So one can orgnize every commit very well by 
	using this staging area.
How can you use the staging area to make sure you have one commit per logical change?
	I can check my stage area and compare difference bewtteen working directory and staging area to make sure 
	the changes I make can orgnize into a logical one. 
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When i want to do some thing brand new and do not to modify the current setting of the program. Also 
	branches help programmer to organize the flow of development. Different branches may correspond to different 
	methods of the programs.
How do the diagrams help you visualize the branch structure?
	From the diagrams, I can easily see the history of different versions and their paths of evolution. And I also 
	can tell from which version I can roll back to a destination.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	After merging two branch, one can tracking to either branches which is before merge. And also the work done by 
	two branches can be merged. The diagram can clearly show the structures of branches.
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Git's automatic merging is a time-saving strategy. I can merge two branch with minimual effort by using this method.
	However, I think there exist some time when ones wants to inspect their different version of program and merge them 
	by their expertise judgement.

